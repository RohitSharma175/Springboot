package com.smart.controller;

import java.io.File;
import java.io.IOException;
import java.nio.file.Files;
import java.nio.file.Paths;
import java.nio.file.StandardCopyOption;
import java.security.Principal;
import java.util.List;
import java.util.Optional;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.core.io.ClassPathResource;
import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import com.smart.dao.ContactRepository;
import com.smart.dao.UserRepository;
import com.smart.entites.Contact;
import com.smart.entites.User;
import com.smart.helper.Message;

@Controller
@RequestMapping("/user")
public class UserController {

	@Autowired
	private UserRepository userRepository;

	@Autowired
	private ContactRepository contactRepository;

	@RequestMapping("/index")
	public String dashboard(Model model, Principal principal) {
		model.addAttribute("title", "User Dashboard");

		return "normal/user_dashboard";
	}

//	open add form handler
	@GetMapping("/add-contact")
	public String openAddContactForm(Model model) {
		model.addAttribute("title", "Add Contact");
		model.addAttribute("contact", new Contact());
		return "normal/add_contact_form";
	}

//	this method will call on every handler this will be the first line of every handler
	@ModelAttribute
	public void addCommanData(Model model, Principal principal) {
		String username = principal.getName();
		User user = userRepository.getUserByUserName(username);

		model.addAttribute("user", user);

	}

//	processing add contact form
	@PostMapping("/process-contact")
	public String processContact(@ModelAttribute Contact contact, @RequestParam("profileImage") MultipartFile file,
			Principal principal, HttpSession session) {
		try {
			String username = principal.getName();
			User user = userRepository.getUserByUserName(username);

			if (file.isEmpty()) {
				System.out.println("cann't find file");
				contact.setImage("defalt.png");

			} else {
				contact.setImage(file.getOriginalFilename());

				File saveFile = new ClassPathResource("static/img").getFile();

				Files.copy(file.getInputStream(),
						Paths.get(saveFile.getAbsolutePath() + File.separator + file.getOriginalFilename()),
						StandardCopyOption.REPLACE_EXISTING);

			}

//			System.out.println(file.getContentType());
//			if (!file.getContentType().equals("image/png")) {
//				System.out.println("file should be png");
//			}

			contact.setUser(user);

			user.getContacts().add(contact);
			userRepository.save(user);

			System.out.println("added successful");

			System.out.println(contact);

			session.setAttribute("message", new Message("Your Contact is add", "success"));

		} catch (Exception e) {
			session.setAttribute("message", new Message("Ops something went wrong", "danger"));
			// TODO Auto-generated catch block
			e.printStackTrace();
		}
		return "normal/add_contact_form";
	}

//	per page 5
	// Show Contact Handler
	@GetMapping("/show-contact/{page}")
	public String showContacts(@PathVariable("page") Integer page, Model model, Principal principal) {
		model.addAttribute("title", "Show Contact");

		String username = principal.getName();
		User user = userRepository.getUserByUserName(username);

		Pageable Pageable = PageRequest.of(page, 3);
		Page<Contact> contact = contactRepository.findContactByUser(user.getId(), Pageable);

		model.addAttribute("contact", contact);
		model.addAttribute("currentPage", page);
		model.addAttribute("totalPages", contact.getTotalPages());

//		findContactByUser.forEach(System.out::println);
//		List<Contact> contacts = user.getContacts();
//		

		return "normal/show_contacts";
	}

	// show single contact page after clicking on emial
	@GetMapping("/{cId}/contact")
	public String showContactDetails(@PathVariable("cId") Integer cId, Model model, Principal principal) {
		model.addAttribute("title", "Show Contact");

		Optional<Contact> findById = contactRepository.findById(cId);

		Contact contact = findById.get();

		String username = principal.getName();
		User user = userRepository.getUserByUserName(username);

		if (user.getId() == contact.getUser().getId()) {
			model.addAttribute("contact", contact);
		}

//		
//		Pageable Pageable = PageRequest.of(page, 3);
//		Page<Contact> contact = contactRepository.findContactByUser(user.getId(),Pageable);
//		
//		model.addAttribute("contact",contact);
//		model.addAttribute("currentPage",page);
//		model.addAttribute("totalPages",contact.getTotalPages());

//		findContactByUser.forEach(System.out::println);
//		List<Contact> contacts = user.getContacts();
//		

		return "normal/contact_detail";
	}

	// delete single contact
	@GetMapping("/delete-contact/{cId}")
	public String contactDelete(@PathVariable("cId") Integer cId, Model model, Principal principal,
			HttpSession session) {
		try {
			model.addAttribute("title", "Delete Contact");

			Optional<Contact> findById = contactRepository.findById(cId);

			Contact contact = findById.get();

			String username = principal.getName();
			User user = userRepository.getUserByUserName(username);

			if (user.getId() == contact.getUser().getId()) {
				contactRepository.deleteById(cId);

				File saveFile = new ClassPathResource("static/img").getFile();
				File file = new File(saveFile.getAbsolutePath() + File.separator + contact.getImage());

//			        if (file.delete()) {
//			            System.out.println("File deleted successfully");
//			        }
//			        else {
//			            System.out.println("Failed to delete the file");
//			        }

				session.setAttribute("message", new Message("Contact Deleted Successfuly", "success"));
				// model.addAttribute("contact", contact);
			}
		} catch (Exception e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		}

//			this is the url not the view name 
		return "redirect:/user/show-contact/0";
	}

	// open update form
	@PostMapping("/update-contact/{cId}")
	public String updateForm(@PathVariable("cId") Integer cId, Model model, Principal principal, HttpSession session) {
		try {
			model.addAttribute("title", "Update Contact");
			System.out.println("TEseingkkkk" + cId);

			Optional<Contact> findById = contactRepository.findById(cId);

			Contact contact = findById.get();

			model.addAttribute("contact", contact);

		} catch (Exception e) {

			e.printStackTrace();
		}
		return "normal/update_form";
	}

	@PostMapping("/process-update")
	public String updateHandler(@ModelAttribute Contact contact, @RequestParam("profileImage") MultipartFile file,
			Principal principal, HttpSession session) {
		try {
			System.out.println(contact);
			System.out.println();
			
			Contact oldcontact = this.contactRepository.findById(contact.getcId()).get();
			
			String username = principal.getName();
			User user = userRepository.getUserByUserName(username);

			if (!file.isEmpty()) {
				contact.setImage(file.getOriginalFilename());

				File saveFile = new ClassPathResource("static/img").getFile();

				Files.copy(file.getInputStream(),
						Paths.get(saveFile.getAbsolutePath() + File.separator + file.getOriginalFilename()),
						StandardCopyOption.REPLACE_EXISTING);
				
				

			}
			else
			{
				contact.setImage(oldcontact.getImage());
			}
				contact.setUser(user);
//
			user.getContacts().add(contact);
			userRepository.save(user);

//			System.out.println("added successful");

			System.out.println(contact);

			session.setAttribute("message", new Message("Your Contact is Updated", "success"));
		} catch (IOException e) {
			// TODO Auto-generated catch 0
			session.setAttribute("message", new Message("Ops something went wrong", "danger"));
			e.printStackTrace();
		}
		return "redirect:/user/"+contact.getcId()+"/contact";
	}

}
